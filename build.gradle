plugins {
    id 'ru.vyarus.java-lib' version '1.0.4' apply false
    id 'ru.vyarus.github-info' version '1.1.0' apply false
    id 'ru.vyarus.quality' version '2.0.0' apply false
    id 'com.jfrog.bintray' version '1.7.1' apply false
    id 'com.github.ben-manes.versions' version '0.13.0' apply false
    id "io.spring.dependency-management" version "0.6.0.RELEASE" apply false

    id 'jacoco'
    id 'net.researchgate.release' version '2.4.1'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

wrapper {
    gradleVersion = 3.0
}

task testReport(type: TestReport) {
    description = 'Generates an aggregate test report'
    destinationDir = file("${buildDir}/reports/allTests")
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'project-report'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    ext {
        dropwizard = '1.0.2'
        guicey = '4.0.0'
        spock = '1.0-groovy-2.4'
    }

    repositories { jcenter(); mavenCentral(); mavenLocal() }
    dependencyManagement {
        imports {
            mavenBom "io.dropwizard:dropwizard-bom:$dropwizard"
        }
        dependencies {
            dependency "ru.vyarus:dropwizard-guicey:$guicey"
            dependency "org.spockframework:spock-core:$spock"
        }
    }
    dependencies {
        provided 'com.google.code.findbugs:jsr305:3.0.1'
        provided 'com.google.code.findbugs:annotations:3.0.1'

        compile "ru.vyarus:dropwizard-guicey"

        testCompile "org.spockframework:spock-core"
        testCompile "io.dropwizard:dropwizard-testing"
    }

    group = 'ru.vyarus.guicey'

    quality {
        strict = false
    }

    github {
        user = 'xvik'
        repository = rootProject.name
        license = 'MIT'
        licenseUrl = github.rawFileUrl('LICENSE');
        changelogFile = 'CHANGELOG.md'
    }

    pom {
        developers {
            developer {
                id 'xvik'
                name 'Vyacheslav Rusakov'
                email 'vyarus@gmail.com'
            }
        }
    }

    bintray {
        user = findProperty('bintrayUser')
        key = findProperty('bintrayKey')
        publications = ['maven']
        dryRun = false
        publish = true
        pkg {
            repo = 'xvik'
            name = project.name
            desc = project.description
            labels = ['dropwizard', 'guice']
            publicDownloadNumbers = true
            version {
                gpg {
                    sign = true
                    passphrase = findProperty('gpgPassphrase')
                }
                mavenCentralSync {
                    sync = false
                    user = findProperty('sonatypeUser')
                    password = findProperty('sonatypePassword')
                }
            }
        }
    }

    test {
        testLogging {
            events 'skipped', 'failed', 'standard_error'
            exceptionFormat 'full'
        }
        maxHeapSize = '512m'
    }
    rootProject.testReport.reportOn test
    jacocoTestReport.reports.xml.enabled = true

    dependencyUpdates.revision = 'release'

    task showDependenciesTree(dependsOn: 'htmlDependencyReport', group: 'help', description:
            'Generates dependencies tree report and opens it in browser') << {
        java.awt.Desktop.getDesktop().open(file('/build/reports/project/dependencies/root.html'))
    }
}

// fake tasks needed to trigger tasks on sub modules

// dependency on all subprojects required for release validation
task build(group: 'build', dependsOn: subprojects.build) << {
    println "Building project"
}

task publish(group: 'publishing', dependsOn: subprojects.bintrayUpload) << {
    println "Publish artefacts into remote repository"
}

task jacocoTestReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = [subprojects.test]

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport.xml"
}
tasks.coveralls.dependsOn jacocoTestReport

afterReleaseBuild {
    // release process manages only root project but publishes all subprojects
    dependsOn = [publish]
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

